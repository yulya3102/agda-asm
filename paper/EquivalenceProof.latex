\iftoggle{russian-draft}{
\section{Эквивалентность динамически и статически слинкованных функций}
}{
\section{Equivalence of dynamically and statically linked functions}
}

\iftoggle{russian-draft}{
Доказательство эквивалентности блоков PLT и соответствующих им функций
опирается на предположения о том, что динамический загрузчик корректно
выполняет свою работу. Эти предположения приведены в листинге
\ref{fig:correctness}.  Предположение \F{GOT[ f ]-correctness} утверждает,
что в элементе GOT, соответстующем функции $f$, находится адрес функции $f$, а
предположение \F{PLT[ f ]-correctness} утверждает, что по адресу,
соответствующему нужному блоку PLT, действительно находится блок PLT.
}{
The proof of equivalence of PLT block and corresponding functions relies on
assumptions of the correctness of dynamic loader. These assumptions are shown
in Listing \ref{fig:correctness}. Assumption \F{GOT[ f ]-correctness}
states that corresponding to function $f$ GOT element contains the address
of the function $f$. Assumption \F{PLT[ f ]-correctness} states that the
address corresponding to appropriate PLT function contains the PLT block.
}

\iftoggle{russian-draft}{
Таким образом, работающая до загрузки программы часть динамического
линковщика может явно указать, на какие свойства динамического загрузчика
она опирается, и, используя их, доказать свою корректность. При этом, если
обе части (работающие до загрузки и при загрузке программы соответственно)
динамического линковщика имеют общую кодовую базу (что немаловероятно),
пруфассистант может при компиляции кода проверить, что они обе используют
одни и те же свойства.
}{
Therefore, pre-runtime part of the dynamic linker can explicitly specify
which properties of the dynamic loader it uses to prove its own
correctness. With that, if pre-runtime and runtime parts of the dynamic
loader share the same codebase, then the proof assistant can ensure that
they both use the exact same properties.
}

\iftoggle{russian-draft}{
Код доказательства эквивалентности функции $f$ и ее блока PLT приведен в
приложении \ref{sec:proof}.
}{
The code of the proof of the equivalence of function $f$ and its PLT block is
shown in Appendix \ref{sec:proof}.
}
Первая лемма, \F{exec-plt} доказывает, что в любом состоянии исполнителя с
корректно заполненным GOT исполнение блока PLT функции $f$ сохранит состояние
исполнителя таким, какое оно было. Это значит, что блок PLT не испортит
ни стек, ни регистры, ни память. Кроме того, после блока PLT исполнение
передастся слинкованной функции. Эта лемма опирается на корректность GOT и
семантику инструкции непрямого перехода.

\labeledfigure{fig:exblock-eq-proof}{Idea of the executable blocks equivalence proof}{
\includegraphics[width=0.5\textwidth]{eqproof.png}
}

\iftoggle{russian-draft}{
Затем лемма \F{exblock-eq-proof}, используя предыдущую лемму,
конструирует отношение эквивалентности исполняемых блоков для блока PLT
функции $f$ и ее самой для одного и того же состояния исполнителя $S$.
}{
Then lemma \F{exblock-eq-proof}, using previous lemma, constructs the
executable blocks equivalence for the PLT block of some function $f$ and
function $f$ itself for some machine state $S$.
}
Два исполняемых блока, $plt-block$ и $f-block$ приводятся к одному и тому
же исполняемому блоку $f-block$, как показано на Figure
\ref{fig:exblock-eq-proof}. Левый из блоков приводится к $f-block$ с
помощью применения леммы \F{exec-plt}, а правый уже равен нужному блоку.

\iftoggle{russian-draft}{
После этого \F{block-eq-proof} обобщает этот результат, построив искомое
отношение эквивалентности
блоков для произвольных одинаковых состояний исполнителя, удовлетворяющих
предположениям о корректности работы динамического загрузчика.
Полученное доказательство говорит о том, что динамическая линковка не
меняет семантику программы.
}{
After that \F{block-eq-proof} generalizes that result, constructing desired
block equivalence relation
for arbitrary machine state that meets assumptions of the correctness of
dynamic loader's work result.
This proof shows that the dynamic linking does not change the program
semantics.
}
