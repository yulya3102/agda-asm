\iftoggle{russian-draft}{
\section{Обзор используемой формализации TAL}
}{
\section{TAL formalization overview}
}

\label{sec:asm-review}

\iftoggle{russian-draft}{
Как было указано ранее, Typed Assembly Language (TAL) является хорошей
моделью для доказательств, касающихся семантики низкоуровневого кода,
потому для данной работы мы будем использовать формализацию на Agda
некоторого низкоуровневого языка, близкого к TAL. Тем не менее, полное
описание используемой формализации окажется слишком большим, сложным и не
полностью соответствующим цели этой статьи, потому мы не будем полностью
специфицировать язык используемой формализации. Вместо этого мы укажем, чем
он отличается от оригинального TAL, кратко опишем его особенности и поясним
смысл типов и конструкторов, используемых в листингах.
}{
As stated earlier, Typed Assembly Language (TAL) is a great model for
reasoning about low-level code semantics, so we will use an Agda
formalization of a low-level language that is similar to TAL. However, a full
description of used formalization would be too big, complex and not really
relevant to the main goal of this paper. So instead, we will specify
how our formalization differs from the original Typed Assembly Language and
explain the semantics of types and functions used in listings.
}

\iftoggle{russian-draft}{
Оригинальный TAL достаточно выразителен для
реализации возможностей высокоуровневых языков, таких как параметрический
полиморфизм или пользовательские структуры данных. Для нашей задачи эти
возможности не являются существенными, но вместо этого возникает
необходимость наличия определенных типов данных и инструкций, используемых
в реализации динамической линковки. В связи с этим используемая
формализация TAL имеет несколько существенных отличий от оригинального
Typed Assembly Language, синтаксис которого приведен в
}{
Original TAL is powerful enough to implement high-level
language features such as parametric polymorphism or records. These features
are not necessary for our task. Instead, we ought to have specific data
types and instructions which are typically used to implement dynamic
linking. Therefore, our TAL formalization has some differences from
original Typed Assembly Language. The syntax of TAL can be found in
}
\citep[fig. 13]{tal}.

\iftoggle{russian-draft}{
Прежде чем описывать особенности используемой формализации, сделаем
пару замечаний по используемой терминологии.
В разных версиях TAL текущее состояние исполняемой программы называлось
по-разному: в TAL и STAL оно называлось \emph{программой (program)}
\citep[fig. 13]{tal} \citep{stal}, в то
время как в MTAL его называли \emph{состоянием программы (program state)}
\citep{mtal}.
Мы будем его называть \emph{\textbf{состоянием программы}}.
Кроме того, слово ``тип'' может быть использовано для описания сущностей из
разных слоев абстракции: оно может как ссылаться на сущность в коде на
Agda, так и на сущность ``тип'' из TAL. Чтобы избежать путаницы, ссылаться на
типы из Agda мы будем с помощью фразы Agda-тип.
}{
Before describing features of our formalization, we will make some remarks
about terminology used in this paper. In different TAL versions current
state of executed program was called differently: in TAL and STAL it was
called \emph{program} \citep[fig. 13]{tal} \citep{stal}, whereas in MTAL it
was called \emph{program state} \citep{mtal}. We will call it
\emph{\textbf{program state}}.
Aside from that, the word ``type'' can be used to refer to different items
from different abstraction layers: it can refer to types from Agda code as
well as types from TAL. We will refer to types from Agda code as
``Agda-type''.
}

\iftoggle{russian-draft}{
Исходный язык TAL был значительно упрощен, что позволило сильно упростить
используемую формализацию. Так, динамический линковщик не нуждается в
полиморфизме на уровне языка ассемблера и сложных типах данных, что ведет к
удалению из языка параметров типов, кортежей и меток инициализированности.
}{
We greatly simplified the original TAL which allowed us to simplify our
formalization. The dynamic linker does not need complex data types and type
polymorphism at assembly language level, so, tuples, initialization flags,
and type parameters are absent in our formalization.
}

\iftoggle{russian-draft}{
Все поддерживаемые типы данных указаны в листинге \ref{fig:types}.
В нашей формализации типы данных описываются двумя разными Agda-типами:
\F{WordType} и \F{ArbitraryType}. Agda-тип \F{WordType} описывает только типы размером с
регистр и используется для корректной типизации таких инструкций, как,
например, копирование значения в регистр из ячейки памяти, которая может быть
потенциально произвольного размера. Agda-тип \F{ArbitraryType}
описывает типы произвольного размера, которые включают в себя типы размером
с регистр с помощью конструктора \C{atom}.
}{
All supported data types are shown in Listing \ref{fig:types}. In our
formalization, data types are described with two different Agda-types:
\F{WordType} and \F{ArbitraryType}. Agda-type \F{WordType} describes only
register-sized types. It is used to correctly type instructions like
\C{mov} from memory to register when the memory can contain arbitrary-sized
types. Agda-type \F{ArbitraryType} describes types of arbitrary size, which
include register-sized types with constructor \C{atom}.
}

\iftoggle{russian-draft}{
Действительно необходимым для нашей задачи типом данных является
типизированный указатель, так как аргументом ключевой для динамической
линковки инструкции непрямого
перехода является указатель на ячейку памяти, содержащую адрес блока кода,
который нужно исполнить. Этому типу соответствует конструктор \C{\_*}
Agda-типа \F{WordType} из листинга \ref{fig:types}. По сути, это тип
кортежа из оригинального TAL, но фиксированной длины и без метки
инициализированности.

Кроме того, код-``прослойка'', добавляемый динамическим линковщиком для
вызова внешних функций, должен не влиять на семантику программу, а потому
не может абстрагироваться от стека вызовов, который он может случайно
``испортить''.
}{
The key to the dynamic linking is the indirect jump instruction that takes
as an argument a pointer to a memory location where the address of target
executable code is stored. Therefore, the type of pointer to typed memory is
essential for our task. The constructor \C{\_*} from the Agda-type
\F{WordType} corresponds to this type.
Essentially, this is the tuple type from the original TAL without the
initialization flag, but with a fixed length.

In addition, the dynamic linker adds intermediate code that is invoked when
an external function is called. That code must not affect program
semantics. Therefore it can not hide call stack in abstractions because it
can be affected by additional procedure calls.
}
\iftoggle{russian-draft}{
\emph{Состояние программы} оригинального TAL, помимо исполняемой
последовательности инструкций, включало в себя состояния регистров и
памяти. В используемой формализации оно дополнительно включает в себя
состояние стека, который для простоты реализации был разделен на две части:
стек данных и стек вызовов. Кроме того, конструктор \C{code} Agda-типа
\F{ArbitraryType}, соответстующий типу последовательности
инструкций, имеет дополнительные аргументы по сравнению с оригинальным TAL.
В используемой формализации аргументами этого конструктора
являются ожидаемые типы регистров, стека данных и стека вызовов, в
то время в оригинальном TAL в аргументах отсутствовали типы стеков.
Это еще одно существенное отличие
используемой формализации от оригинального TAL.
}{
\emph{Program state} of
original TAL includes currently executed \emph{instruction sequence},
\emph{register files} and \emph{heaps}. Our
formalization additionally includes stack, which is split into two parts:
\emph{data stack} and \emph{call stack}. Aside from that, constructor
\C{code} of Agda-type \F{ArbitraryType}, corresponding to the instruction
sequence type, has additional arguments: it contains not only expected
\emph{register file type}, but also types of expected data stack and call
stack.  This is another difference from original TAL.
}
