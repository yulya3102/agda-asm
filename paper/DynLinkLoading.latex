\iftoggle{russian-draft}{
\section{Динамическая линковка и загрузка}
}{
\section{Dynamic linking and loading}
}

\iftoggle{russian-draft}{
Эта работа не рассматривает объектные файлы и программы как таковые.
Вместо этого она рассматривает ABI программы целиком, о котором можно
рассуждать и без разбиения программы на разные библиотеки.  Данная статья
фокусируется на том, какие изменения динамический линкер производит с кодом
программы, а не каким образом происходит поиск внешних символов. С учетом
этого формализация разбиения программы на различные библиотеки является
лишним усложнением.
}{
This work does not consider object files and programs as actual files.
Instead, it focuses on the program ABI which can be discussed without
splitting a program into separate libraries. This paper focuses on the
program code transformations performed in pre-runtime phase and not the way
that external symbols should be searched for. Keeping this in mind,
formalization of splitting a program into separate libraries seems as
overcomplication.
}

\iftoggle{russian-draft}{
С указанным выше упрощением понятие ``внешнего'' символа сводится всего лишь
к указанию на то, какие блоки кода должны иметь соответствующие им элементы
GOT и PLT. В целях простоты будем считать, что записи GOT и PLT
генерируются на каждый блок кода. Приведенная в листинге
\ref{fig:changeABI} функция \F{pltize} показывает, как
динамический линковщик меняет layout памяти, добавляя в него новые
элементы. Вместо каждого блока кода исходной программы $f$, рассчитывающего
на состояние регистров \AgdaBound{Γ} и состояния стеков данных
\AgdaBound{DS} и вызовов \AgdaBound{CS}, в динамически слинкованной
программе будет целых три элемента в памяти:
}{
With simplification stated earlier, the notion of the ``external'' symbol is
reduced to marking blocks that should have corresponding GOT and PLT
elements. In order of simplicity, we will consider every code block as
having its own GOT and PLT entries. Function \F{pltize} from Listing
\ref{fig:changeABI} shows how the layout of memory is changed at the
pre-runtime phase of dynamic linking by adding new elements to it. Instead
of every block $f$ from the original
program, that expects register state \V{Γ}, data stack \V{DS} and call
stack \V{CS}, dynamically linked program will have three elements in
memory:
}

\begin{itemize}
\item
\iftoggle{russian-draft}{
    соответствующий этому блоку кода блок PLT, который является блоком кода
    того же типа, что и $f$;
}{
    the PLT block that corresponds to this block $f$, and it has the same type
    as $f$;
}
\item
\iftoggle{russian-draft}{
    элемент GOT, являющийся указателем на блок кода того же типа, что и $f$;
}{
    GOT entry that is a pointer to a block of the same type as $f$;
}
\item
\iftoggle{russian-draft}{
    сам блок кода $f$.
}{
    the block $f$.
}
\end{itemize}

\iftoggle{russian-draft}{
В реальности таблицы PLT и GOT вынесены в отдельные секции и не
располагаются рядом с кодом. Это не влияет на семантику программы,
потому перестановка элементов в памяти и группировка таблиц GOT и PLT в
данной работе не рассматривается.
}{
In real programs, PLT and GOT are stored in additional sections and not
around the actual code. This does not change the program semantics, so we
do not cover in this paper rearrangement of memory elements and grouping
GOT and PLT entries together.
}

\iftoggle{russian-draft}{
Зная, по какому адресу находилась функция \AgdaBound{f} в неслинкованной
программе, можно определить,
по каким адресам будут расположены в слинкованной программе соответствующие
этой функции элемент PLT $plt.f$, элемент GOT $got.f$ и сама функция
$f$.
}{
Knowing where function \V{f} is located in non-linked program, it is
possible to determine where PLT entry $plt.f$, GOT entry $got.f$ and the
original function $f$ will be stored in the dynamically linked program.
}
Для получения этих адресов определены функции
\F{plt}, \F{got} и \F{linked-symbol} соответственно. Эти функции
впоследствии используются в листингах \ref{fig:correctness} и
\ref{sec:proof}.

\iftoggle{russian-draft}{
Как видно из вышесказанного, расположение какого-либо блока кода и
соответствующих ему элементов GOT и PLT известно в фазу до запуска
программы. Эта информация может быть использована в процессе линковки:
например, вызовы блоков PLT могут быть подставлены вместо вызовов самих
функций, и, кроме того, могут быть выполнены link-time optimizations.
}{
As seen above, the locations of a code block and corresponding GOT and PLT
elements are known at the pre-runtime phase and can be used in the linking
process. For example, calls to PLT block can be substituted for calls to
corresponding functions and link-time optimizations can be performed.
}

\iftoggle{russian-draft}{
Как было указано ранее, блок PLT должен обеспечивать получение в рантайме
адреса пролинкованной внешней функции и передачу исполнения на этот адрес.
Простейший блок PLT выглядит следующим образом: используя указанный при
компиляции адрес соответствующей ему ячейки GOT, он исполняет инструкцию
непрямого перехода \C{jmp[\_]} на тот адрес, который записан в GOT. Так
как динамический загрузчик должен после загрузки библиотеки с нужной
функцией заполнить соответствующие ей элементы GOT, положив в них ее адрес,
исполнение указанного блока PLT будет приводить к исполнению самой функции.
Код такого блока PLT, выраженный в используемой формализации языка
ассемблера, приведен в листинге \ref{fig:plt-stub}.
}{
As stated earlier, PLT block should get the address of linked external
function at runtime and continue execution with code from that address. The
simplest PLT block looks like this: using specified in compile-time address
of corresponding GOT entry, it executes indirect jump instruction
\C{jmp[\_]} with address, stored in the GOT entry. As long as the dynamic
loader correctly fills corresponding GOT elements after loading an external
library, the execution of specified PLT block will lead to the execution of
the function itself. The code of such PLT block in our formalization of the
assembly language is shown in Listing \ref{fig:plt-stub}.
}
Here \F{↝} denotes last instruction in the executable block.

\iftoggle{russian-draft}{
Как было сказано в секции \ref{sec:asm-review}, индексом Agda-типа блока
является описание изменений типа состояния исполнителя,
производимых этим блоком. В случае с блоком \F{plt-stub} это \C{dempty}:
пустое изменение состояния, потому что приведенный блок PLT ничего не
меняет. В противном случае вызов
функции через ее блок PLT не был бы прозрачным и менял бы семантику
программы.
}{
As noted in Section \ref{sec:asm-review}, Agda type of a block is
indexed by a description of machine state changes performed by this block.
For the \F{plt-stub} block it is an empty change \C{dempty}, because this
block does not change anything. Otherwise, function call through the
corresponding PLT block would be noticeable and would change the program
semantics.
}

\iftoggle{russian-draft}{
Каким бы ни был блок PLT для какого-либо варианта динамической линковки,
его код всегда известен линковщику заранее. Это позволяет строить
доказательства про семантику динамически слинкованного кода.
}{
Regardless of what PLT block is like, its code is known in advance. Using
this information, the linker can reason about the semantics of the
dynamically linked code.
}
