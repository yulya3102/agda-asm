Определим набор типов, позволяющих гарантировать корректность
ассемблерного кода.

Все значения, расположенные либо в памяти, либо в регистрах, должны
иметь некоторый тип. Также стоит описывать состояние набора регистров,
так как блоки кода могут рассчитывать на наличие в регистрах значений
конкретных типов. То же верно и для состояния памяти.

\ignore{
\begin{code}
module DevCore where

open import Data.List
\end{code}
}

\begin{code}
data Type : Set
RegFileTypes : Set
HeapTypes : Set
\end{code}

Состояние регистров представим списком типов, причем каждому
регистру должен соответстовать элемент списка. В этом случае регистр
является индексом в этом списке.

Аналогичные рассуждения верны и для состояния памяти.

\begin{code}
RegFileTypes = List Type
HeapTypes    = List Type
\end{code}

Рассматриваемыми значениями являются только блоки кода и указатели на
некоторое значение, расположенное в памяти. При этом корректность
исполнения блока кода возможно гарантировать, ограничив состояние регистров
и памяти, которые должны быть на момент начала исполнения блока.
Для простоты будем считать, что значения, расположенные в памяти,
никогда не изменяются, поэтому тип блока описывает только требуемое
состояние регистров.

\begin{code}
data Type where
  _*  : Type → Type
  blk : (Γ : RegFileTypes) → Type
\end{code}
