## Основные определения

Определим набор основных сущностей, используемых в дальнейшем, и опишем
типы, позволяющие гарантировать корректность исполнения правильно
типизированных программ.

Исполнение кода производит некоторые манипуляции с данными, поэтому
основной используемой сущностью являются значения каких-либо типов.
Значения могут располагаться либо в регистрах, либо в памяти. Для
упрощения реализации динамически аллоцируемая память не рассматривается,
<!--- мне очень не нравится эта формулировака, но я не знаю, как это
переформулировать -->
вся требуемая память предварительно аллоцируется в секции данных
бинарных файлов.

Все значения, расположенные либо в памяти, либо в регистрах, должны
иметь некоторый тип. Также стоит описывать состояние набора регистров,
так как блоки кода могут рассчитывать на наличие в регистрах значений
конкретных типов. То же верно и для состояния памяти.

\ignore{
\begin{code}
module DevCore where

open import Data.List
\end{code}
}

**TODO: надо все типы переименовать так, чтобы между версиями одни и те
же сущности имели одинаковые имена**

\begin{code}
data Type : Set
RegFileTypes : Set
HeapTypes : Set
\end{code}

Состояние регистров представим списком типов, причем каждому
регистру должен соответстовать элемент списка. В этом случае именем
регистра является индекс в этом списке.

Аналогичные рассуждения верны и для состояния памяти.

\begin{code}
RegFileTypes = List Type
HeapTypes    = List Type
\end{code}

Рассматриваемыми значениями являются только блоки кода и указатели на
некоторое значение, расположенное в памяти. При этом корректность
исполнения типизируемого блока кода возможно гарантировать, описав в его
типе состояние регистров и памяти, которые должны быть на момент начала
исполнения блока.  Для простоты считаем, что значения, расположенные
в памяти, никогда не изменяются, поэтому тип блока описывает только
требуемое состояние регистров.

\begin{code}
data Type where
  _*  : Type → Type
  blk : (Γ : RegFileTypes) → Type
\end{code}
