\iftoggle{russian-draft}{
\section{Динамическая линковка и загрузка}
}{
\section{Dynamic linking and loading}
}

\iftoggle{russian-draft}{
Эта работа не рассматривает объектные файлы и программы как таковые.
Вместо этого она рассматривает ABI программы целиком, о котором можно
рассуждать и без разбиения программы на разные библиотеки.  Данная статья
фокусируется на том, какие изменения динамический линкер производит с кодом
программы, а не каким образом происходит поиск внешних символов. С учетом
этого формализация разбиения программы на различные библиотеки является
лишним усложнением.
}{
This work does not consider object files and programs as actual files.
Instead, it focuses on the program ABI which can be discussed without
splitting a program into separate libraries. This paper focuses on the
program code transformations performed by a dynamic linker and not the way
that external symbols should be searched for. Keeping this in mind,
formalization of splitting a program into separate libraries seems like
extra complication.
}

\iftoggle{russian-draft}{
С указанным выше упрощением понятие ``внешнего'' символа сводится всего лишь
к указанию на то, какие блоки кода должны иметь соответствующие им элементы
GOT и PLT. В целях простоты будем считать, что записи GOT и PLT
генерируются на каждый блок кода. Приведенная в листинге
\ref{fig:changeABI} функция \F{pltize} показывает, как
динамический линковщик меняет layout памяти, добавляя в него новые
элементы. Вместо каждого блока кода исходной программы $f$, рассчитывающего
на состояние регистров \AgdaBound{Γ} и состояния стеков данных
\AgdaBound{DS} и вызовов \AgdaBound{CS}, в динамически слинкованной
программе будет целых три элемента в памяти:
}{
With simplification stated earlier, the notion of the ``external'' symbol is
reduced to marking blocks that should have corresponding GOT and PLT
elements. In order of simplicity, we will consider every code block as
having its own GOT and PLT entries. Function \F{pltize} from Listing
\ref{fig:changeABI} shows how the dynamic linker changes the layout of
memory by adding new elements to it. Instead of every block $f$ from the
original
program, that expects register state \V{Γ}, data stack \V{DS} and call
stack \V{CS}, dynamically linked program will have three elements in
memory:
}

\begin{itemize}
\item
\iftoggle{russian-draft}{
    соответствующий этому блоку кода блок PLT, который является блоком кода
    того же типа, что и $f$;
}{
    the PLT block that corresponds to this block $f$, and it has the same type
    as $f$;
}
\item
\iftoggle{russian-draft}{
    элемент GOT, являющийся указателем на блок кода того же типа, что и $f$;
}{
    GOT entry that is a pointer to a block of the same type as $f$;
}
\item
\iftoggle{russian-draft}{
    сам блок кода $f$.
}{
    the block $f$.
}
\end{itemize}

\iftoggle{russian-draft}{
В реальности таблицы PLT и GOT вынесены в отдельные секции и не
располагаются рядом с кодом. Это не влияет на семантику программы,
потому перестановка элементов в памяти и группировка таблиц GOT и PLT в
данной работе не рассматривается.
}{
In real programs, PLT and GOT are stored in additional sections and not
around the actual code. This does not change the program semantics, so we
do not cover in this paper rearrangement of memory elements and grouping
GOT and PLT entries together.
}

\iftoggle{russian-draft}{
Определенные дальше в листинге \ref{fig:changeABI} функции \F{plt}, \F{got}
и \F{linked-symbol} позволяют, зная, по
какому адресу находилась функция \AgdaBound{f} \AgdaSymbol{=} \F{code} \AgdaBound{\Gamma} \AgdaBound{DS} \AgdaBound{CS} в неслинкованной программе, определить,
по каким адресам будут расположены в слинкованной программе соответствующие
этой функции элемент PLT $plt.f$, элемент GOT $got.f$ и сама функция
$f$ соответственно.
}{
Functions \F{plt}, \F{got} and \F{linked-symbol} from Listing
\ref{fig:changeABI} allow to determine where PLT entry $plt.f$, GOT entry
$got.f$ and original function $f$ \AgdaSymbol{=} \F{code} \V{\Gamma} \V{DS}
\V{CS} will be stored in the dynamically linked program.
}
\iftoggle{russian-draft}{
Аргументами этих функций являются адреса функций в неслинкованной
программе, которые в нашей формализации выражены Agda-типами принадлежности
блока кода \C{code} \V{\Gamma} \V{DS} \V{CS} списку типов памяти \V{\Psi}.
Конструкторами такого отношения принадлежности являются \C{here} и
\C{there}. Первый из них говорит, что элемент лежит в начале данного
списка, и предоставляет доказательство равенства искомого элемента и
начала списка, конструируемое с помощью \C{refl}. Второй конструктор,
\C{there}, говорит о том, что элемент лежит в хвосте списка, с помощью
рекурсивно сконструированного отношения принадлежности концу списка.

Таким образом, динамический линковщик знает, где в слинкованном объектном
файле будет расположен какой-либо блок кода, и может указать, где будут
находиться соответствующие ему элементы GOT и PLT. Эта информация известа в
link-time и может быть использована в процессе линковки: например,
линковщик может вставлять вызовы блоков PLT вместо вызовов самих функций и
выполнять link-time optimizations.
}{
These functions take function addresses from unlinked program, which in our
code are expressed with Agda-types of list membership showing that code
block \C{code} \V{\Gamma} \V{DS} \V{CS} is a member of memory types list
\V{\Psi}. \C{here} and \C{there} are the constructors of this membership
relation. The former states that specified element is at the beginning of
the list and provides a proof of equality of specified element and the head of
the list, which is constructed by \C{refl}. The latter, constructor
\C{there}, states that the element belongs to the tail of the list, proving
that by recursively constructed relation of membership to the tail of the
list.

Therefore, the dynamic linker knows where the code block and corresponding
GOT and PLT elements will be in the linked object file. This information is
known at link-time and can be used in the linking process. For example, the
dynamic linker can substitute calls to PLT block for calls to corresponding
functions and perform link-time optimizations.
}

\iftoggle{russian-draft}{
Как было указано ранее, блок PLT должен обеспечивать получение в рантайме
адреса пролинкованной внешней функции и передачу исполнения на этот адрес.
Простейший блок PLT выглядит следующим образом: используя указанный при
компиляции адрес соответствующей ему ячейки GOT, он исполняет инструкцию
непрямого перехода \C{jmp[\_]} на тот адрес, который записан в GOT. Так
как динамический загрузчик должен после загрузки библиотеки с нужной
функцией заполнить соответствующие ей элементы GOT, положив в них ее адрес,
исполнение указанного блока PLT будет приводить к исполнению самой функции.
Код такого блока PLT, выраженный в используемой формализации языка
ассемблера, приведен в листинге \ref{fig:plt-stub}.
}{
As stated earlier, PLT block should in runtime get the address of linked
external function and continue execution with code from that address. The
simplest PLT block looks like this: using specified in compile-time address
of corresponding GOT entry, it executes indirect jump instruction
\C{jmp[\_]} with address, stored in the GOT entry. As long as the dynamic
loader correctly fills corresponding GOT elements after loading an external
library, the execution of specified PLT block will lead to the execution of
the function itself. The code of such PLT block in our formalization of the
assembly language is shown in Listing \ref{fig:plt-stub}.
}

\iftoggle{russian-draft}{
Как было сказано в секции \ref{sec:asm-review}, индексом Agda-типа блока
является описание изменений типа состояния исполнителя,
производимых этим блоком. В случае с блоком \F{plt-stub} это \C{dempty}:
пустое изменение состояния, потому что приведенный блок PLT ничего не
меняет. В противном случае вызов
функции через ее блок PLT не был бы прозрачным и менял бы семантику
программы.
}{
As noted in Section \ref{sec:asm-review}, Agda type of a block is
indexed by a description of machine state changes performed by this block.
For the \F{plt-stub} block it is an empty change \C{dempty}, because this
block does not change anything. Otherwise, function call through the
corresponding PLT block would be noticeable and would change the program
semantics.
}

\iftoggle{russian-draft}{
Каким бы ни был блок PLT для какого-либо варианта динамической линковки,
его код всегда известен линковщику заранее. Это позволяет строить
доказательства про семантику динамически слинкованного кода.
}{
Regardless of what PLT block is like, the dynamic linker knows its code in
advance. Using this information, it can reason about the semantics of the
dynamically linked code.
}
