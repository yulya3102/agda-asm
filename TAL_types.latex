\iftoggle{russian-draft}{
Часть \emph{состояния программы}, не содержащую исполняемой последовательности инструкций,
будем называть \emph{состоянием исполнителя}. Определение Agda-типа
\F{StateType}, описывающего тип состояния исполнителя, приведенo в листинге
\ref{fig:statetype}.
Типы регистров, описываемые Agda-типом \F{RegFileTypes}, как и в оригинальном
TAL и STAL, описываются отображением из имен регистров в соответствующие
им типы. Аналогично, типы элементов в памяти, описываемые Agda-типом
\F{HeapTypes} - это отображение из
указателей (меток) в соответствующие им типы. Типы стека данных,
описываемые Agda-типом \F{DataStackType}, как и в STAL, описываются списком
типов, соответствующим находящимся на стеке элементам. Типы стека вызовов,
описываемые Agda-типом \F{CallStackType}, описываются похожим списком,
определяющим типы
указателей-адресов возврата. Так как данная статья фокусируется на описании
семантики динамической линковки, детали реализации на Agda этих отображений
здесь не описаны.
}{
\textbf{\emph{Machine state}} is the part of the \emph{program state} that does not
contain \emph{instruction sequence}. Definition of Agda-type \F{StateType}
that describes type of machine state is shown in Listing
\ref{fig:statetype}.
Types of registers, described by Agda-type \F{RegFileTypes}, as in original
TAL and STAL, are represented as a mapping from register names to
corresponding types. In the same manner, types of memory elements,
described by Agda-type \F{HeapTypes}, are a mapping from pointers (labels)
to corresponding types. Types of data stack are described by Agda-type
\F{DataStackType} and, as in STAL, are described by the list of types
corresponding to elements on the stack. Types of call stack, described by
Agda-type \F{CallStackType}, are described by a similar list defining
types of return address pointers.
This paper focuses on description of dynamic linking semantics, so we omit
the implementations of these mappings.
}

\iftoggle{russian-draft}{
Разные инструкции меняют различные части состояния исполнителя. Инструкции,
определяющие, какой код будет исполняться дальше, будем называть
\emph{инструкциями перехода}, а все остальные инструкции —
\emph{инструкциями общего назначения}. Примерами инструкций перехода
являются такие инструкции, как \C{jmp}, \C{call} и \C{jnz}.
}{
Different instructions change different parts of machine state.
We will refer to instructions that define which code will be executed next
as \textbf{\emph{branch instructions}}. Instructions like \C{jmp}, \C{call}, and
\C{jnz} are branch instructions. All other instructions we will call
\textbf{\emph{general purpose instructions}}.
}

\iftoggle{russian-draft}{
Так как линковка принимает во внимание только переходы между различными
частями загруженного в память кода, удобно ввести понятие \textbf{\emph{базового
блока}}. Базовым блоком мы будем называть последовательность инструкций
общего назначения, завершающуюся инструкцией перехода. Этому понятию
соответствует термин \emph{последовательность инструкций}
(\emph{instruction sequence}) из оригинального TAL. Тип базового блока
задается конструктором \C{code} Agda-типа \F{ArbitraryType} из листинга
\ref{fig:types} и описывает, в каком состоянии исполнителя может быть
исполнен этот блок.

Функции могут состоять из нескольких базовых блоков, связанными переходами.
Главная отличительная особенность функции состоит в том, что она имеет
единственную точку входа, которая совпадает с ее первым базовым блоком.
В некоторых случаях, когда не имеет значения, сколько блоков содержит
функция, но важно, что существует входная точка, мы будем взаимозаменять
слова ``блок'' и ``функция'', ссылаясь на первый базовый блок некоторой функции.
}{
Since linking takes into account only jumps between different parts of
loaded executable code, it is useful to define \textbf{\emph{basic block}}.
A basic block is a sequence of general-purpose instructions followed by a
branch instruction. It corresponds to the \emph{instruction sequence} from
the original TAL. The type of a basic block is specified by the constructor
\C{code} of Agda-type \F{ArbitraryType} from Listing \ref{fig:types}. It
describes in which state this block can be executed.

\textbf{\emph{Functions}} can contain several basic blocks linked with jumps. What is
essential to the function that it has the unique start point that matches
its first basic block. Sometimes, it does not matter how many blocks a
function has. If that is the case, we can use the word ``function'' as well
as the word ``block'', referring to the first block of a function.
}

\iftoggle{russian-draft}{
Для обеспечения корректности вызова функции $g$ в конце
базового блока $f$ необходимо понимать, как блок $f$ типа $S_f$ меняет
типы регистров и стеков и может ли он к концу своего исполнения получить
ожидаемый функцией $g$ тип $S_g$. Для этого Agda-тип блока индексирован
некоторым описанием того, как этот блок меняет тип состояния
исполнителя. Это описание хранится в Agda-типе
\F{Diff}, параметром которого является тип состояния исполнителя, к
которому может применяться это изменение.
Индуктивное определение Agda-типа \emph{блока кода} приведено в листинге
\ref{fig:block}.
}{
To ensure that function $g$ call at the end of the basic block
$f$ is correct, we have to know how block $f$
of type $S_f$ changes register file types and stack types and whether it
can transform machine state type $S_f$ to machine state type $S_g$ expected
by function $g$. To achieve that, Agda-type corresponding to the block is
indexed by some description of how this
block changes different parts of the machine state type. This description is
stored in Agda-type \F{Diff}, which takes as parameter machine state type
that can be changed by this \F{Diff}. Recursive definition of the Agda-type of
\emph{basic block} is shown in Listing \ref{fig:block}.
}
Конструктор \C{↝} позволяет получить блок, состоящий из
одной инструкции перехода \V{i}, применяющей изменение стека вызовов типа
\V{c}. Конструктор \C{\_∙\_} добавляет инструкцию общего назначения
\AgdaBound{i} с изменением \AgdaBound{c} к началу блока \AgdaBound{b}, при
этом тип блока \AgdaBound{b} должен получаться из типа инструкции
\AgdaBound{i} после применения к нему соответствующего этой инструкции
изменения \V{c} с помощью функции \F{dapply}, что показано в типе блока
\V{b}. В результате получается блок с изменением, составленным с помощью
функции \F{dappend} из изменений инструкции \AgdaBound{i} и блока
\AgdaBound{b}. Выражения же \F{csChg} \V{c} и \F{sChg} \V{c}
преобразовывают специфичное для инструкции \V{i} изменение \V{c} в общее
изменение состояния исполнителя, описываемое Agda-типом \F{Diff}.

% Constructor \C{↝} allows constructing a block consisting of a single branch
% instruction \V{i} that changes type of call stack by change \V{c}.
% Expression \F{csChg} \V{c} of this constructor transforms call
% stack change \V{c} into common \F{Diff} of machine state of type
% \V{S}.
% Constructor \C{\_∙\_} adds general-purpose instruction \V{i} with change
% \V{c} to the beginning of the block \V{b}. Type of block \V{b} must come
% out from the type of instruction \V{i} after applying change \V{c}
% corresponding to this instruction with function \F{dapply}, as shown in the
% type of the block \V{b}. Expression \F{sChg} \V{c} of the type of that
% block,
% similarly to the previous constructor, transforms instruction-specific
% change \V{c} to common \F{Diff} of machine state. This results into a
% block with \F{Diff} that consists of changes corresponding to instruction \V{i}
% and block \V{b}, combined with the function \F{dappend}.

\iftoggle{russian-draft}{
Семантика приведенного языка ассемблера определяется двумя функциями,
описывающими семантику инструкций общего назначения \F{Instr} и инструкций
перехода \F{BranchInstr}. Каждому виду инструкций разрешено менять только
часть \emph{состояния программы} \F{State}. Соответственно, эти функции
принимают на вход \emph{состояние программы} и возвращают новое состояние
той части состояния программы, которую им разрешено менять.  Так, для
инструкций общего назначения результатом исполнения является кортеж из
состояния регистров, памяти и стека данных, а результатом исполнения
управляющих инструкций является пара из нового состояния стека вызовов и
следующего блока, который
нужно исполнить. Кроме того, семантика блока кода описывается похожим
образом: результатом исполнения блока является пара из нового состояния
исполнителя и блока, который нужно исполнить следующим.
}{
Semantics of this assembly language is defined by two functions describing
semantics of general-purpose instructions \F{Instr} and branch instructions
\F{BranchInstr}. Each kind of instruction is allowed to change only part of
\emph{program state} \F{State}.
Therefore, these functions take as parameter \emph{program state} and
return a new state of the part of the program state that they are allowed
to change.  For example, general-purpose
instructions execution result is a tuple of a register file, a heap, and a
data stack. On the other
hand, the branch instruction execution result is a pair of a new call stack
state and next block to execute.
Moreover, semantics of the block is described in the same manner:
the execution result of the block is a pair of the new machine state and
next block to execute.
}

\iftoggle{russian-draft}{
Для описания семантики динамической линковки необходима семантика только
инструкции непрямого перехода \C{jmp[\_]}. Потому описание семантики других
инструкций здесь не приведено. Семантика инстукции \C{jmp[\_]} определена
следующим образом:
в состоянии исполнителя \AgdaBound{S} исполнение инструкции непрямого
перехода по указателю \AgdaBound{p} оставит стек вызовов прежним,
\F{State.callstack} \AgdaBound{S}, а исполнение перейдет на
последовательность инструкций, загруженную из памяти \F{State.memory}
\AgdaBound{S} по указателю, загруженному из ячейки \AgdaBound{p}.
Это определение в рамках используемой формализации приведено в листинге
\ref{fig:ijmp-semantics}.
}{
To describe dynamic linking semantics we only need semantics of the
indirect jump instruction \C{jmp[\_]}. Therefore, semantics of other
instructions is not described here.
Semantics for the \C{jmp[\_]} instruction is defined like this:
execution of indirect jump to the pointer \AgdaBound{p} in machine state
\AgdaBound{S} does not change call stack \F{State.callstack} \AgdaBound{S},
and execution will be continued from the block loaded from
\F{State.memory} \AgdaBound{S} by the pointer loaded from memory by
\AgdaBound{p}.
The definition used in our formalization is shown in Listing
\ref{fig:ijmp-semantics}.
}
